"""
Strategic dependency checker service with unwavering precision.
Handles both Python and npm package validation with deterministic execution.
"""

import asyncio
import json
import logging
import os
import re
import subprocess
from typing import Any, Dict, List, Optional, Tuple, Union, cast

import httpx
import orjson

from dep_checker_mcp.models.core import (
    ErrorCode,
    McpError,
    MypyIssue,
    MypyResult,
    NpmAuditResult,
    PackageInfo,
)

# Configure logging with strategic precision
logger = logging.getLogger("dep-checker-mcp")


class DependencyChecker:
    """
    Strategic dependency checker with unwavering precision.
    Handles both Python and npm package validation.
    """
    def __init__(self) -> None:
        self.http_client: httpx.AsyncClient = httpx.AsyncClient(timeout=30.0)
    
    async def check_python_package(self, package_name: str, version: Optional[str] = None) -> PackageInfo:
        """Check Python package with strategic precision."""
        try:
            # Get package info from PyPI
            response = await self.http_client.get(
                f"https://pypi.org/pypi/{package_name}/json",
                headers={"Accept": "application/json"}
            )
            response.raise_for_status()
            pypi_data = cast(Dict[str, Any], response.json())
            
            # Extract relevant info
            latest_version = str(pypi_data["info"]["version"])
            homepage = str(pypi_data["info"]["home_page"] or pypi_data["info"]["project_url"] or f"https://pypi.org/project/{package_name}/")
            description = str(pypi_data["info"]["summary"] or "")
            
            # Extract documentation URLs
            project_urls = pypi_data["info"].get("project_urls", {})
            documentation_url = None
            api_docs_url = None
            github_url = None
            
            # Look for documentation links
            for label, url in project_urls.items():
                label_lower = label.lower()
                if "documentation" in label_lower or "docs" in label_lower:
                    documentation_url = url
                elif "api" in label_lower:
                    api_docs_url = url
                elif "github" in label_lower or "source" in label_lower or "repository" in label_lower:
                    github_url = url
            
            # Set documentation URL fallbacks if not found
            if not documentation_url:
                documentation_url = project_urls.get("Documentation") or project_urls.get("Homepage") or homepage
            
            # Try to find mypy stubs URL
            mypy_stub_url = f"https://github.com/python/typeshed/tree/master/stubs/{package_name}" if package_name else None
            
            # Check if the package has typing info on PyPI
            has_py_typed = False
            for file_info in pypi_data.get("urls", []):
                if file_info.get("packagetype") == "sdist":
                    # Package likely has typing information
                    has_py_typed = True
                    break
            
            # If no mypy stub found and package has typing, use its documentation
            if not mypy_stub_url and has_py_typed and documentation_url:
                mypy_stub_url = documentation_url
            
            # Extract release date with strategic precision
            release_date: Optional[str] = None
            release_info = pypi_data["releases"].get(latest_version, [])
            if release_info and isinstance(release_info, list) and len(release_info) > 0:
                release_date = str(release_info[0].get("upload_time", ""))
            
            current_version = version or latest_version
            is_outdated = self._compare_versions(current_version, latest_version)
            
            # Check for security issues with strategic precision
            security_issues: List[Dict[str, Any]] = []
            try:
                safety_response = await self.http_client.get(
                    f"https://pyup.io/api/v1/safety/{package_name}/{current_version}",
                    headers={"Accept": "application/json"}
                )
                if safety_response.status_code == 200:
                    safety_data = cast(Dict[str, Any], safety_response.json())
                    security_issues = cast(List[Dict[str, Any]], safety_data.get("vulnerabilities", []))
            except Exception as e:
                logger.warning(f"Could not check security for {package_name}: {str(e)}")
            
            return PackageInfo(
                name=package_name,
                current_version=current_version,
                latest_version=latest_version,
                is_outdated=is_outdated,
                homepage=homepage,
                description=description,
                release_date=release_date,
                security_issues=security_issues
            )
        except Exception as e:
            logger.error(f"Error checking Python package {package_name}: {str(e)}")
            raise McpError(
                ErrorCode.TOOL_EXECUTION_ERROR,
                f"Error checking Python package {package_name}: {str(e)}"
            )
    
    async def check_npm_package(self, package_name: str, version: Optional[str] = None) -> PackageInfo:
        """Check npm package with unwavering precision."""
        try:
            # Get the latest version from npm registry
            response = await self.http_client.get(
                f"https://registry.npmjs.org/{package_name}",
                headers={"Accept": "application/json"}
            )
            response.raise_for_status()
            npm_data = cast(Dict[str, Any], response.json())
            
            latest_version = str(npm_data["dist-tags"]["latest"])
            homepage = str(npm_data.get("homepage", ""))
            description = str(npm_data.get("description", ""))
            release_date = str(npm_data["time"].get(latest_version, ""))
            
            current_version = version or latest_version
            is_outdated = self._compare_versions(current_version, latest_version)
            
            # Check for security issues with strategic precision
            security_issues: List[Dict[str, Any]] = []
            try:
                # Check npm audit API with deterministic execution
                audit_response = await self.http_client.post(
                    "https://registry.npmjs.org/-/npm/v1/security/advisories/bulk",
                    json={"packages": [{package_name: current_version}]},
                    headers={"Accept": "application/json"}
                )
                if audit_response.status_code == 200:
                    audit_data = cast(Dict[str, Any], audit_response.json())
                    security_issues = list(audit_data.get("advisories", {}).values())
            except Exception as e:
                logger.warning(f"Could not check security for {package_name}: {str(e)}")
            
            return PackageInfo(
                name=package_name,
                current_version=current_version,
                latest_version=latest_version,
                is_outdated=is_outdated,
                homepage=homepage,
                description=description,
                release_date=release_date,
                security_issues=security_issues
            )
        except Exception as e:
            logger.error(f"Error checking npm package {package_name}: {str(e)}")
            raise McpError(
                ErrorCode.TOOL_EXECUTION_ERROR,
                f"Error checking npm package {package_name}: {str(e)}"
            )
    
    async def check_python_file(self, file_path: str) -> List[PackageInfo]:
        """Check Python requirements file with strategic precision."""
        if not os.path.exists(file_path):
            raise McpError(
                ErrorCode.INVALID_PARAMS,
                f"File not found: {file_path}"
            )
        
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # Parse requirements with unwavering precision
        packages: List[Tuple[str, Optional[str]]] = []
        
        # Strategy 1: Parse requirements.txt format
        if file_path.endswith(".txt"):
            for line in content.splitlines():
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                
                # Extract package name and version with deterministic regex
                match = re.match(r"([a-zA-Z0-9_.-]+)\s*([=<>!~]+.*)?", line)
                if match:
                    package_name = match.group(1)
                    version_spec = match.group(2)
                    
                    # Extract exact version from specification with strategic precision
                    version: Optional[str] = None
                    if version_spec:
                        exact_match = re.match(r"==\s*([a-zA-Z0-9_.-]+)", version_spec)
                        if exact_match:
                            version = exact_match.group(1)
                    
                    packages.append((package_name, version))
        
        # Strategy 2: Parse pyproject.toml format
        elif file_path.endswith(".toml"):
            # Use a simplified TOML parser for unwavering precision
            dependencies_section = False
            for line in content.splitlines():
                line = line.strip()
                
                if line == "[tool.poetry.dependencies]" or line == "dependencies = [":
                    dependencies_section = True
                    continue
                elif line.startswith("[") or line == "]":
                    dependencies_section = False
                
                if dependencies_section and "=" in line:
                    # Extract package with deterministic logic
                    line = line.strip('"\',[]()')
                    match = re.match(r'["\']*([a-zA-Z0-9_.-]+)["\']*\s*[=]+\s*["\']*([^"\'#,]+)', line)
                    if match:
                        package_name = match.group(1)
                        version_spec = match.group(2).strip()
                        
                        # Clean version spec with strategic precision
                        version = version_spec.strip('"\'>=^~')
                        packages.append((package_name, version))
        
        # Check each package with unwavering precision
        results: List[PackageInfo] = []
        for package_name, version in packages:
            try:
                package_info = await self.check_python_package(package_name, version)
                results.append(package_info)
            except Exception as e:
                logger.error(f"Error checking {package_name}: {str(e)}")
                # Include error record with deterministic structure
                results.append(PackageInfo(
                    name=package_name,
                    current_version=version or "unknown",
                    latest_version="error",
                    is_outdated=False,
                    description=f"Error: {str(e)}",
                    homepage=None,
                    release_date=None
                ))
        
        return results
    
    async def check_npm_file(self, file_path: str) -> List[PackageInfo]:
        """Check npm package.json file with strategic precision."""
        if not os.path.exists(file_path):
            raise McpError(
                ErrorCode.INVALID_PARAMS,
                f"File not found: {file_path}"
            )
        
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        try:
            # Parse package.json with deterministic execution
            data = json.loads(content)
            
            # Extract dependencies with strategic precision
            dependencies: Dict[str, str] = {}
            for dep_type in ["dependencies", "devDependencies"]:
                if dep_type in data:
                    for name, version in data[dep_type].items():
                        # Clean version spec for deterministic comparison
                        clean_version = str(version).strip('"\'>=^~')
                        dependencies[name] = clean_version
            
            # Check each package with unwavering precision
            results: List[PackageInfo] = []
            for package_name, version in dependencies.items():
                try:
                    package_info = await self.check_npm_package(package_name, version)
                    results.append(package_info)
                except Exception as e:
                    logger.error(f"Error checking {package_name}: {str(e)}")
                    # Include error record with deterministic structure
                    results.append(PackageInfo(
                        name=package_name,
                        current_version=version or "unknown",
                        latest_version="error",
                        is_outdated=False,
                        description=f"Error: {str(e)}",
                        homepage=None,
                        release_date=None
                    ))
            
            return results
        except Exception as e:
            logger.error(f"Error parsing package.json: {str(e)}")
            raise McpError(
                ErrorCode.TOOL_EXECUTION_ERROR,
                f"Error parsing package.json: {str(e)}"
            )
    
    async def run_mypy(self, file_path: str) -> MypyResult:
        """Run mypy with unwavering precision."""
        if not os.path.exists(file_path):
            raise McpError(
                ErrorCode.INVALID_PARAMS,
                f"File not found: {file_path}"
            )
        
        try:
            # Use asyncio.subprocess for deterministic execution
            proc = await asyncio.create_subprocess_exec(
                "mypy", 
                "--show-column-numbers",
                "--show-error-codes",
                file_path,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout_bytes, stderr_bytes = await proc.communicate()
            stdout = stdout_bytes.decode("utf-8") if stdout_bytes else ""
            
            # Parse mypy output with strategic precision
            issues: List[MypyIssue] = []
            if stdout:
                for line in stdout.splitlines():
                    # Parse mypy output with deterministic regex - handle both error and note levels
                    match = re.match(r"([^:]+):(\d+):(\d+): (\w+): (.+) \[(\w+-*\w*)\]", line)
                    if match:
                        file, line_num, col, level, message, error_code = match.groups()
                        # Only capture error-level messages with unwavering precision
                        if level.lower() == "error":
                            issues.append(MypyIssue(
                                file=file,
                                line=int(line_num),
                                column=int(col),
                                level=level,
                                message=message,
                                error_code=error_code
                            ))
            
            return MypyResult(
                success=proc.returncode == 0,
                issues=issues,
                exit_code=proc.returncode or 0
            )
        except Exception as e:
            logger.error(f"Error running mypy: {str(e)}")
            raise McpError(
                ErrorCode.TOOL_EXECUTION_ERROR,
                f"Error running mypy: {str(e)}"
            )
    
    async def run_npm_audit(self, file_path: str) -> NpmAuditResult:
        """Run npm audit with unwavering precision."""
        if not os.path.exists(file_path):
            raise McpError(
                ErrorCode.INVALID_PARAMS,
                f"File not found: {file_path}"
            )
        
        project_dir = os.path.dirname(file_path)
        
        try:
            # Use asyncio.subprocess for deterministic execution
            proc = await asyncio.create_subprocess_exec(
                "npm", 
                "audit", 
                "--json",
                cwd=project_dir,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout_bytes, stderr_bytes = await proc.communicate()
            stdout = stdout_bytes.decode("utf-8") if stdout_bytes else ""
            
            if stdout:
                # Parse npm audit output with strategic precision
                audit_data = json.loads(stdout)
                return NpmAuditResult(
                    success=proc.returncode == 0,
                    vulnerabilities=audit_data.get("vulnerabilities", {}),
                    metadata=audit_data.get("metadata", {}),
                    exit_code=proc.returncode or 0
                )
            else:
                raise McpError(
                    ErrorCode.TOOL_EXECUTION_ERROR,
                    f"No output from npm audit: {stderr_bytes.decode('utf-8') if stderr_bytes else 'unknown error'}"
                )
        except Exception as e:
            logger.error(f"Error running npm audit: {str(e)}")
            raise McpError(
                ErrorCode.TOOL_EXECUTION_ERROR,
                f"Error running npm audit: {str(e)}"
            )
    
    def _compare_versions(self, current: str, latest: str) -> bool:
        """Compare versions with strategic precision to determine if outdated."""
        if current == latest:
            return False
        
        # Split into release and prerelease parts with unwavering precision
        current_release, current_prerelease = self._split_version(current)
        latest_release, latest_prerelease = self._split_version(latest)
        
        # Compare release versions first with strategic precision
        release_comparison = self._compare_release_versions(current_release, latest_release)
        
        # If release versions are equal, compare prerelease designations
        if release_comparison == 0:
            # If current has a prerelease but latest doesn't, current is outdated
            if current_prerelease and not latest_prerelease:
                return True
            # If current doesn't have a prerelease but latest does, current is NOT outdated
            elif not current_prerelease and latest_prerelease:
                return False
            # If both have prereleases, compare them alphabetically
            elif current_prerelease and latest_prerelease:
                return current_prerelease < latest_prerelease
            # If neither has a prerelease, they are equal (not outdated)
            else:
                return False
        
        # Return based on release version comparison
        return release_comparison < 0
        
    def _split_version(self, version: str) -> tuple[str, str]:
        """Split version into release and prerelease parts with strategic precision."""
        # Check for prerelease designation patterns
        match = re.match(r'^([0-9.]+)[-.]?(.+)?$', version)
        if match:
            release, prerelease = match.groups()
            return release, prerelease or ""
        return version, ""

    def _compare_release_versions(self, current: str, latest: str) -> int:
        """Compare release versions and return -1 (outdated), 0 (equal), 1 (newer)."""
        # Parse versions for deterministic comparison
        current_parts = [int(part) for part in re.findall(r'\d+', current)]
        latest_parts = [int(part) for part in re.findall(r'\d+', latest)]
        
        # Pad shorter list with strategic precision
        while len(current_parts) < len(latest_parts):
            current_parts.append(0)
        while len(latest_parts) < len(current_parts):
            latest_parts.append(0)
        
        # Compare parts with deterministic logic
        for c, l in zip(current_parts, latest_parts):
            if c < l:
                return -1
            elif c > l:
                return 1
        
        return 0
    
    async def close(self) -> None:
        """Close resources with unwavering precision."""
        await self.http_client.aclose()
